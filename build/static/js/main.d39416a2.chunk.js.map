{"version":3,"sources":["utils.tsx","Heatmap.tsx","types.ts","useApi.tsx","Sidebar.tsx","Destination.tsx","HeatmapContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["urlBoundsFormat","bounds","getNorthEast","lat","lng","getSouthWest","Heatmap","FetchStates","props","map","useMap","layerRef","useRef","L","featureGroup","useEffect","current","clearLayers","points","undefined","options","radius","getZoom","gradient","0","0.5","1","heatLayer","addTo","apiFetchReducer","state","action","type","INIT","isLoading","isError","SUCCESS","data","payload","FAILURE","Error","useApi","initialUrl","useState","url","setUrl","useReducer","dispatch","a","axios","result","p","fetchData","Sidebar","getSidebarData","getCenter","toFixed","sidebar","setSidebar","useMapEvent","className","zoom","Destination","setLat","setLng","setError","isValidCoords","onSubmit","e","preventDefault","latNum","parseFloat","lngNum","setView","value","size","onChange","target","HeatmapContainer","getBounds","setBounds","minZoom","maxZoom","newBounds","DefaultIcon","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","App","MapContainer","center","scrollWheelZoom","preferCanvas","TileLayer","attribution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAQO,SAASA,EAAgBC,GAC5B,MAAM,0BAAN,OAAiCA,EAAOC,eAAeC,IAAvD,oBAAsEF,EAAOC,eAAeE,IAA5F,oBAA2GH,EAAOI,eAAeF,IAAjI,oBAAgJF,EAAOI,eAAeD,K,0BCqC3JE,IC5CHC,ED4CGD,EAlCf,SAAiBE,GACb,IAAMC,EAAMC,cAGNC,EAAWC,iBAAOC,IAAEC,gBA2B1B,OAzBAC,qBAAU,WAENJ,EAASK,QAAQC,cAGjB,IAAMC,OAA2BC,IAAjBX,EAAMU,OAAwBV,EAAMU,OAAS,GAKvDE,EAA0B,CAC5BC,OAH2B,EAAhBZ,EAAIa,UAIfC,SAAU,CACNC,EAAK,QACLC,GAAK,SACLC,EAAK,QAKbb,IAAEc,UAAUT,EAAQE,GAASQ,MAAMjB,EAASK,SAC5CL,EAASK,QAAQY,MAAMnB,KAExB,CAACA,EAAKD,EAAMU,SAER,M,iDE9BX,SAASW,EAAgBC,EAAcC,GACnC,OAAQA,EAAOC,MACX,KAAKzB,EAAY0B,KACb,OAAO,2BACAH,GADP,IAEII,WAAW,EACXC,SAAS,IAEjB,KAAK5B,EAAY6B,QACb,OAAO,2BACAN,GADP,IAEII,WAAW,EACXC,SAAS,EACTE,KAAMN,EAAOO,UAErB,KAAK/B,EAAYgC,QACb,OAAO,2BACAT,GADP,IAEII,WAAW,EACXC,SAAS,IAEjB,QACI,MAAM,IAAIK,Q,SDjCVjC,K,YAAAA,E,kBAAAA,E,mBAAAA,M,KCwEGkC,MA7Bf,SAAgBC,GAAqB,IAAD,EACVC,mBAASD,GADC,mBACzBE,EADyB,KACpBC,EADoB,OAGNC,qBAAWjB,EAAiB,CAClDK,WAAW,EACXC,SAAS,IALmB,mBAGzBL,EAHyB,KAGlBiB,EAHkB,KA0BhC,OAlBAhC,qBAAU,YACS,uCAAG,8BAAAiC,EAAA,6DACdD,EAAS,CAAEf,KAAMzB,EAAY0B,OADf,kBAIWgB,IAAML,GAJjB,OAIJM,EAJI,OAMJb,EAA0Ba,EAAOb,KAAK5B,KAAI,SAAC0C,GAAD,MAAY,CAACA,EAAC,EAAD,IAAeA,EAAC,EAAD,IAAeA,EAAC,MAC5FJ,EAAS,CAAEf,KAAMzB,EAAY6B,QAASE,QAASD,IAPrC,gDASVU,EAAS,CAAEf,KAAMzB,EAAYgC,UATnB,yDAAH,qDAafa,KACD,CAACR,IAGG,CAACd,EAAOe,I,OC7CJQ,MAtBf,WACI,IAAM5C,EAAMC,cAEN4C,EAAiB,SAAC7C,GACpB,MAAO,CAAE,IAAOA,EAAI8C,YAAYpD,IAAIqD,QAAQ,GAAI,IAAO/C,EAAI8C,YAAYnD,IAAIoD,QAAQ,GAAI,KAAQ/C,EAAIa,YAJxF,EAOeqB,mBAASW,EAAe7C,IAPvC,mBAORgD,EAPQ,KAOCC,EAPD,KAaf,OAJAC,YAAY,QAAQ,WAChBD,EAAWJ,EAAe7C,OAI1B,qBAAKmD,UAAU,eAAf,SACI,6CACeH,EAAQtD,IADvB,iBAC0CsD,EAAQrD,IADlD,YACgEqD,EAAQI,WC6CrEC,MA9Df,WACI,IAAMrD,EAAMC,cADO,EAGGiC,mBAAS,WAHZ,mBAGZxC,EAHY,KAGP4D,EAHO,OAIGpB,mBAAS,WAJZ,mBAIZvC,EAJY,KAIP4D,EAJO,OAKSrB,oBAAS,GALlB,mBAKZR,EALY,KAKH8B,EALG,KAqBbC,EAAgB,SAAC/D,EAAaC,GAChC,OAAKD,IAAQ,IAAMA,GAAO,IAAQC,IAAQ,KAAOA,GAAO,KAO5D,OACI,qBAAKwD,UAAU,YAAf,SACI,sBAAMO,SAxBO,SAACC,GAClBA,EAAEC,iBAEF,IAAMC,EAASC,WAAWpE,GACpBqE,EAASD,WAAWnE,GAEtB8D,EAAcI,EAAQE,IACtBP,GAAS,GACTxD,EAAIgE,QAAQ,CAACH,EAAQE,KAErBP,GAAS,IAcT,SACI,sBAAKL,UAAU,uBAAf,UACI,sBAAKA,UAAU,SAAf,kBACS,uBACD5B,KAAK,OACL0C,MAAOvE,EACPwE,KAAM,GACNC,SAAU,SAAAR,GAAC,OAAIL,EAAOK,EAAES,OAAOH,aAGvC,sBAAKd,UAAU,SAAf,kBACS,uBACD5B,KAAK,OACL0C,MAAOtE,EACPuE,KAAM,GACNC,SAAU,SAAAR,GAAC,OAAIJ,EAAOI,EAAES,OAAOH,aAGvC,sBAAKd,UAAU,SAAf,UACI,uBAAOA,UAAU,oBAAoB5B,KAAK,SAAS0C,MAAM,UACxDvC,GACG,qBAAKyB,UAAU,wBAAf,8CCVbkB,MA/Bf,WACI,IAAMrE,EAAMC,cADY,EAGIiC,mBAASlC,EAAIsE,aAHjB,mBAGjB9E,EAHiB,KAGT+E,EAHS,KAKlBpC,EAAM5C,EAAgBC,GALJ,EAMCwC,EAAOG,GANR,mBAMjBM,EANiB,KAMTL,EANS,KAsBxB,OAZApC,EAAIW,QAAQ6D,QAAU,EACtBxE,EAAIW,QAAQ8D,QAAU,GAEtBvB,YAAY,WAAW,WACnB,IAAMwB,EAA0B1E,EAAIsE,YACpCC,EAAUG,MAGdpE,qBAAU,WACN8B,EAAO7C,EAAgBC,MACxB,CAACA,EAAQ4C,IAGR,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAe3B,OAAQgC,EAAOb,W,wBCzBtC+C,EAAcvE,IAAEwE,KAAK,CACvBC,QAASD,IACTE,UAAWC,MAEb3E,IAAE4E,OAAOC,UAAUtE,QAAQiE,KAAOD,EAyBnBO,MArBf,WAEE,OACE,sBAAK/B,UAAU,MAAf,UACE,8BACE,oBAAIA,UAAU,QAAd,oCAGF,eAACgC,EAAA,EAAD,CAAcC,OAAQ,CAAC,QAAY,WAAYhC,KAAM,GAAIiC,iBAAiB,EAAOC,cAAc,EAA/F,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZrD,IAAI,uDAGN,cAAC,EAAD,WCvBOsD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d39416a2.chunk.js","sourcesContent":["import { LatLngBounds } from \"leaflet\";\n// import { BASE_URL } from \"./my_constants\";\n\n/**\n * Verbose but easy way to get url formatted for bounding box query.\n * \n * @param bounds coordinate bounding box\n */\nexport function urlBoundsFormat(bounds: LatLngBounds): string {\n    return `api/ipaddress/?top_lat=${bounds.getNorthEast().lat}&top_lng=${bounds.getNorthEast().lng}&bot_lat=${bounds.getSouthWest().lat}&bot_lng=${bounds.getSouthWest().lng}`;\n}","import { useEffect, useRef } from \"react\";\nimport { useMap } from \"react-leaflet\";\nimport L, { HeatMapOptions } from 'leaflet';\nimport 'leaflet.heat';\nimport { HeatmapProps } from \"./types\";\n\n/**\n * Clears previous heatmap layer points and then renders new\n * points passed in by parent container.\n * \n * @param props contains Heatmap points\n */\nfunction Heatmap(props: HeatmapProps) {\n    const map = useMap();\n\n    // Hook is needed to store mutable state which keeps track of refernce to a layer group.\n    const layerRef = useRef(L.featureGroup());\n\n    useEffect(() => {\n        // Clear previous renders.\n        layerRef.current.clearLayers();\n\n        // Make sure points have been given.\n        const points = (props.points !== undefined) ? props.points : [];\n\n        // Scale radius based on zoom. Larger radius at greater zoom levels.\n        const radius = map.getZoom() * 3;\n\n        const options: HeatMapOptions = {\n            radius: radius,\n            gradient: {\n                0.0: 'green',\n                0.5: 'yellow',\n                1.0: 'red'\n            }\n        };\n\n        // Add points to layer group so that they can easily be removed upon rerender.\n        L.heatLayer(points, options).addTo(layerRef.current);\n        layerRef.current.addTo(map);\n\n    }, [map, props.points]);\n\n    return null;\n}\n\nexport default Heatmap;","import { HeatLatLngTuple } from \"leaflet\";\n\nexport enum FetchStates {\n    INIT = 'INIT',\n    SUCCESS = 'SUCCESS',\n    FAILURE = 'FAILURE'\n}\n\nexport type Action = {\n    type: FetchStates;\n    payload?: HeatLatLngTuple[];\n}\n\nexport type State = {\n    isLoading: boolean;\n    isError: boolean;\n    data?: HeatLatLngTuple[];\n}\n\nexport interface HeatmapProps {\n    points?: HeatLatLngTuple[];\n}\n\nexport interface SidebarData {\n    lng: string;\n    lat: string;\n    zoom: number;\n}","import axios from \"axios\";\nimport { HeatLatLngTuple } from \"leaflet\";\nimport { useEffect, useState, useReducer } from \"react\";\nimport { FetchStates, State, Action } from \"./types\";\n\n\n/**\n * Reducer to determine state of GET request such as if it\n * is currently still loading the data.\n * \n * @param state state of request data\n * @param action possible resulting actions from FetchStates\n */\nfunction apiFetchReducer(state: State, action: Action): State {\n    switch (action.type) {\n        case FetchStates.INIT:\n            return {\n                ...state,\n                isLoading: true,\n                isError: false\n            };\n        case FetchStates.SUCCESS:\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.payload\n            };\n        case FetchStates.FAILURE:\n            return {\n                ...state,\n                isLoading: false,\n                isError: true\n            };\n        default:\n            throw new Error();\n    }\n}\n\n\n/**\n * Makes GET request to specified URL using reducer to handle state.\n * \n * @param initialUrl starting url string state\n */\nfunction useApi(initialUrl: string) {\n    const [url, setUrl] = useState(initialUrl);\n\n    const [state, dispatch] = useReducer(apiFetchReducer, {\n        isLoading: false,\n        isError: false,\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            dispatch({ type: FetchStates.INIT });\n\n            try {\n                const result = await axios(url);\n                // HACK: Kind of inefficient to map through large arrays to create the proper type...\n                const data: HeatLatLngTuple[] = result.data.map((p: any) => [p[\"p\"][\"lat\"], p[\"p\"][\"lng\"], p[\"c\"]]);\n                dispatch({ type: FetchStates.SUCCESS, payload: data });\n            } catch (error) {\n                dispatch({ type: FetchStates.FAILURE })\n            }\n        };\n\n        fetchData();\n    }, [url]);\n\n    // Need to make sure that custom hook returns constant tuple.\n    return [state, setUrl] as const;\n}\n\nexport default useApi;","import { SidebarData } from \"./types\";\nimport { useMap, useMapEvent } from \"react-leaflet\";\nimport { useState } from \"react\";\n\nfunction Sidebar() {\n    const map = useMap();\n\n    const getSidebarData = (map: any): SidebarData => {\n        return { \"lat\": map.getCenter().lat.toFixed(4), \"lng\": map.getCenter().lng.toFixed(4), \"zoom\": map.getZoom() }\n    };\n\n    const [sidebar, setSidebar] = useState(getSidebarData(map));\n\n    useMapEvent('move', () => {\n        setSidebar(getSidebarData(map));\n    });\n\n    return (\n        <div className='sidebarStyle'>\n            <div>\n                Latitude: {sidebar.lat} | Longitude: {sidebar.lng} | Zoom: {sidebar.zoom}\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;","import { useState } from \"react\";\nimport { useMap } from \"react-leaflet\";\n\nfunction Destination() {\n    const map = useMap();\n\n    const [lat, setLat] = useState(\"51.5098\");\n    const [lng, setLng] = useState(\"-0.1180\");\n    const [isError, setError] = useState(false);\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault();\n\n        const latNum = parseFloat(lat);\n        const lngNum = parseFloat(lng);\n\n        if (isValidCoords(latNum, lngNum)) {\n            setError(false);\n            map.setView([latNum, lngNum]);\n        } else {\n            setError(true);\n        }\n    };\n\n    const isValidCoords = (lat: number, lng: number): boolean => {\n        if ((lat >= -90 && lat <= 90) && (lng >= -180 && lng <= 180)) {\n            return true;\n        }\n        return false;\n    };\n\n\n    return (\n        <div className=\"destStyle\">\n            <form onSubmit={handleSubmit}>\n                <div className=\"columns is-vcentered\">\n                    <div className=\"column\">\n                        Lat: <input\n                            type=\"text\"\n                            value={lat}\n                            size={10}\n                            onChange={e => setLat(e.target.value)} />\n                    </div>\n\n                    <div className=\"column\">\n                        Lng: <input\n                            type=\"text\"\n                            value={lng}\n                            size={10}\n                            onChange={e => setLng(e.target.value)} />\n                    </div>\n\n                    <div className=\"column\">\n                        <input className=\"button is-success\" type=\"submit\" value=\"Go To\" />\n                        {isError &&\n                            <div className=\"has-background-danger\">Must be valid lat/lng</div>\n                        }\n                    </div>\n                </div>\n\n            </form>\n        </div>\n    );\n}\n\nexport default Destination;","import { LatLngBounds } from \"leaflet\";\nimport { useEffect, useState } from \"react\";\nimport { useMap, useMapEvent } from \"react-leaflet\";\nimport { urlBoundsFormat } from \"./utils\";\nimport Heatmap from \"./Heatmap\";\nimport useApi from \"./useApi\";\nimport Sidebar from \"./Sidebar\";\nimport \"leaflet.heat\";\nimport Destination from \"./Destination\";\n\n\n/**\n * Renders child Heatmap component using points found within the current view bounds.\n */\nfunction HeatmapContainer() {\n    const map = useMap();\n\n    const [bounds, setBounds] = useState(map.getBounds());\n\n    const url = urlBoundsFormat(bounds);\n    const [result, setUrl] = useApi(url);\n\n    // Restrict minZoom because zooming out too far causes performance issues.\n    // Querying location data for basically the entire world is just too much for the current implementation.\n    map.options.minZoom = 6;\n    map.options.maxZoom = 14;\n\n    useMapEvent('moveend', () => {\n        const newBounds: LatLngBounds = map.getBounds();\n        setBounds(newBounds);\n    });\n\n    useEffect(() => {\n        setUrl(urlBoundsFormat(bounds));\n    }, [bounds, setUrl]);\n\n    return (\n        <div>\n            <Sidebar />\n            <Destination />\n            <Heatmap {...{ points: result.data }} />\n        </div>\n    );\n}\n\nexport default HeatmapContainer;","import React from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css';\n\nimport { MapContainer, TileLayer } from 'react-leaflet'\nimport HeatmapContainer from './HeatmapContainer';\n\n// --------------------\n// Hack to make leaflet css work with React-Leaflet.\n// See https://stackoverflow.com/questions/49441600/react-leaflet-marker-files-not-found\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n// ----------------------\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1 className=\"title\">IPv4 Address Heatmap</h1>\n      </div>\n\n      <MapContainer center={[39.791000, -86.148003]} zoom={12} scrollWheelZoom={false} preferCanvas={true}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n\n        <HeatmapContainer />\n\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}